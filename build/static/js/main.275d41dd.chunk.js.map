{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateWindowDimensions","setState","objectSpread","state","height","window","innerHeight","onSelectionChanged","params","console","log","onGridReady","gridOptions","context","componentParent","assertThisInitialized","columnDefs","createColumnDefs","defaultColDef","width","rowSelection","localeText","noRowsToShow","page","current","last","data","_this2","addEventListener","map","mbgl","Map","container","mapContainer","style","center","zoom","dragRotate","nav","NavigationControl","showCompass","addControl","carto","setDefaultAuth","user","apiKey","source","SQL","s","expressions","viz","Viz","color","rgba","strokeWidth","variables","list","viewportFeatures","prop","name","layer","Layer","addTo","interactivity","Interactivity","clickedFeatureId","on","event","features","forEach","feature","id","blendTo","strokeColor","reset","length","self","api","getModel","getRowCount","forEachNode","node","index","cartodb_id","setSelected","ensureIndexVisible","myArr","value","push","rownumber","i_a","y_r_qq","y_s_qq","o_a_qq","s_t_qq","n_viv_norm","i_u_qq_rk","n_eda","n_viv","o_u_qq_rk","removeEventListener","field","headerName","cellStyle","textAlign","fontWeight","_this3","react_default","a","createElement","ref","el","boxSizing","overflowX","className","main","rowData","enableSorting","enableColResize","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.275d41dd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {AgGridReact} from \"ag-grid-react\"\nimport carto from '@carto/carto-vl'\nimport mbgl from '@carto/mapbox-gl'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\n\nimport './App.css';\n\n//const mbgl = window.mapboxgl;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridOptions: {\n          context: {\n              componentParent: this\n          }\n      },\n      columnDefs: this.createColumnDefs(),\n      defaultColDef: {\n          width: 100\n      },\n      rowSelection: \"single\",\n      localeText: {\n          noRowsToShow: 'Ninguna fila que mostrar todavia'\n      },\n      page: {\n        current: 1,\n        last: 1\n      },\n      height: window.innerHeight,\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    //mbgl.accessToken = 'pk.eyJ1IjoicmFmYWVsZmVybmFuZGV6Z2lzIiwiYSI6IjBjNGViZjA2NzcyOTliOTk0Y2RjOWU0ZTQ3YmZkZjMxIn0.wAh4BuKcpN3SMAv-NVm-Sg';\n    const map = new mbgl.Map({\n      container: this.mapContainer,\n      style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',\n      center: [-3.706467, 40.455674],\n      zoom: 9,\n      dragRotate: false\n    });\n    const nav = new mbgl.NavigationControl({\n      showCompass: false\n    });\n    map.addControl(nav, 'bottom-right');\n    \n    carto.setDefaultAuth({\n      user: 'udasaas',\n      apiKey: 'GAriSM2Lxn8xxv5HRl2sWQ' //cartovlgithub\n    });\n    \n    const source = new carto.source.SQL(\"SELECT geo.name, ind.cartodb_id, ind.category_id, ind.i_a, ind.y_r_qq, ind.y_s_qq, ind.o_a_qq, ind.s_t_qq, ind.n_viv_norm, ind.i_u_qq_rk, ind.id, ind.n_eda, ind.n_viv, ind.o_a, ind.o_pm, ind.o_pu, ind.o_pu_qq, ind.o_u, ind.o_u_qq, ind.o_u_qq_rk, ind.operation, ind.p_e_ter, ind.p_ed_39, ind.p_viv_pp, ind.p_viv_vac, ind.pa_edu_c, ind.pa_edu_g, ind.pa_ocio, ind.pa_p, ind.pa_tp, ind.r_d_rk, ind.r_g, ind.r_s_rk, ind.r_t_rk, ind.renthog_06_13_m, ind.s_fn, ind.s_p, ind.s_pc, ind.s_t, ind.s_u, ind.s_u_qq, ind.s_u_qq_rk, ind.viv_edad_efc, ind.y_r, ind.y_s, geo.the_geom, geo.the_geom_webmercator FROM udasaas.geo_boundary_geometry as geo INNER JOIN udasaas.rgi ind on geo.id = ind.id WHERE ( (ind.type=13 and ind.l_10='EspaÃ±a') or (ind.type=13 and ind.l_10='Italia') or (ind.type=13 and ind.l_10='Peru') ) and ind.category_id is null and ind.operation = 1\");\n    const s = carto.expressions;\n    const viz = new carto.Viz({\n      color: s.rgba(204, 204, 204, 0.75),\n      //strokeColor: opacity(BlueViolet, 0.8),\n      strokeWidth: 2,\n      variables: {\n        list: s.viewportFeatures(s.prop('cartodb_id'), s.prop('name'), s.prop('i_a'), s.prop('y_r_qq'), s.prop('y_s_qq'), s.prop('o_a_qq'), s.prop('s_t_qq'), s.prop('n_viv_norm'), s.prop('i_u_qq_rk'), s.prop('n_eda'), s.prop('n_viv'), s.prop('o_u_qq_rk')),\n        name: s.prop('name')\n      }\n    });\n    const layer = new carto.Layer('myLayer', source, viz);\n    layer.addTo(map);\n    const interactivity = new carto.Interactivity(layer);\n    const delay = 50;\n    let clickedFeatureId = null;\n\n\n\n  \n\n\n\n\n    \n    interactivity.on('featureEnter', event => {\n      event.features.forEach(feature => {\n        if (feature.id !== clickedFeatureId) {\n          feature.color.blendTo('opacity(DeepPink, 0.5)', delay)\n          feature.strokeWidth.blendTo('3', delay);\n          feature.strokeColor.blendTo('opacity(white, 0.9)', delay);\n        }\n      });\n    });\n    interactivity.on('featureLeave', event => {\n      event.features.forEach(feature => {\n        if (feature.id !== clickedFeatureId) {\n          feature.color.reset(delay);\n          feature.strokeWidth.reset(delay);\n          feature.strokeColor.reset(delay);\n        }\n      });\n    });\n    interactivity.on('featureClick', event => {\n      if (event.features.length) {\n        const feature = event.features[0];\n        clickedFeatureId = feature.id;\n        feature.color.blendTo('opacity(LimeGreen, 0.5)', delay)\n        //feature.strokeWidth.blendTo('7', delay);\n        //feature.strokeColor.blendTo('opacity(LimeGreen, 0.8)', delay);\n\n        //Put on top the selected polygon\n        console.log(this.state.data);\n        let self = this;\n        console.log(this.state.gridOptions.api.getModel().getRowCount());\n        this.state.gridOptions.api.forEachNode(function (node, index) {\n          if (feature.id === node.data.cartodb_id) {\n            //alert(node.data.name);\n\n            //console.log(node.rowIndex);\n            //console.log(index);\n              \n            node.setSelected(true, false);\n            self.state.gridOptions.api.ensureIndexVisible(index, 'top');\n            //self.state.gridOptions.api.ensureNodeVisible(node, 'top');\n            return;\n          }\n      })\n      }\n    });\n    interactivity.on('featureClickOut', event => {\n      if (event.features.length) {\n        const feature = event.features[0];\n        clickedFeatureId = '';\n        feature.color.reset(delay);\n        //feature.strokeWidth.reset(delay);\n        //feature.strokeColor.reset(delay);\n      }\n    });\n    \n    layer.on('updated', () => {\n      console.log('updated');\n\n      /*\n      let myArr = [];\n      viz.variables.list.value.forEach(feature => {\n        myArr.push({rownumber: myArr.length+1, cartodb_id:feature.cartodb_id, name:feature.name, i_a: feature.i_a, y_r_qq: feature.y_r_qq,\n          y_s_qq: feature.y_s_qq, o_a_qq: feature.o_a_qq, s_t_qq: feature.s_t_qq, n_viv_norm: feature.n_viv_norm, i_u_qq_rk: feature.i_u_qq_rk, n_eda: feature.n_eda, n_viv: feature.n_viv, o_u_qq_rk: feature.o_u_qq_rk});\n        \n      });\n      this.setState({...this.state, data: myArr});\n      */\n      \n    });\n    layer.on('loaded', () => {\n      console.log('loaded');\n\n      \n      let myArr = [];\n      viz.variables.list.value.forEach(feature => {\n        myArr.push({rownumber: myArr.length+1, cartodb_id:feature.cartodb_id, name:feature.name, i_a: feature.i_a, y_r_qq: feature.y_r_qq,\n          y_s_qq: feature.y_s_qq, o_a_qq: feature.o_a_qq, s_t_qq: feature.s_t_qq, n_viv_norm: feature.n_viv_norm, i_u_qq_rk: feature.i_u_qq_rk, n_eda: feature.n_eda, n_viv: feature.n_viv, o_u_qq_rk: feature.o_u_qq_rk});\n        \n      });\n      this.setState({...this.state, data: myArr});\n      \n      \n    });\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  updateWindowDimensions = () => {\n    this.setState({ ...this.state, height: window.innerHeight })\n  }\n\n  createColumnDefs() {\n    return [\n        {field: 'rownumber', headerName: '#', cellStyle: {textAlign: 'center'}},\n        {field: 'cartodb_id', headerName: 'ID', cellStyle: {textAlign: 'center'}},\n        {field: 'name', headerName: 'Name', width: 300, cellStyle: {textAlign: 'center', fontWeight: \"bold\"}},\n        {field: 'i_a', headerName: 'i_a', cellStyle: {textAlign: 'center'}},\n        {field: 'y_r_qq', headerName: 'y_r_qq', cellStyle: {textAlign: 'center'}},\n        {field: 'y_s_qq', headerName: 'y_s_qq', cellStyle: {textAlign: 'center'}},\n        {field: 'o_a_qq', headerName: 'o_a_qq', cellStyle: {textAlign: 'center'}},\n        {field: 's_t_qq', headerName: 's_t_qq', cellStyle: {textAlign: 'center'}},\n        {field: 'n_viv_norm', headerName: 'n_viv_norm', cellStyle: {textAlign: 'center'}},\n        {field: 'i_u_qq_rk', headerName: 'i_u_qq_rk', cellStyle: {textAlign: 'center'}},\n        {field: 'n_eda', headerName: 'n_eda', cellStyle: {textAlign: 'center'}},\n        {field: 'n_viv', headerName: 'n_viv', cellStyle: {textAlign: 'center'}},\n        {field: 'o_u_qq_rk', headerName: 'o_u_qq_rk', cellStyle: {textAlign: 'center'}}\n    ]\n  }\n  onSelectionChanged = (params) => {\n    //let data = params.api.getSelectedRows()[0];\n    console.log('onSelectionChanged');\n  }\n  onGridReady = (params) => {\n    //let data = params.api.getSelectedRows()[0];\n    console.log('onGridReady');\n  }\n\n  render() {\n    return (\n      <div style={{height: this.state.height}}>\n        <div ref={el => this.mapContainer = el} style={{height: '50%', width: '100%'}} />\n        <div style={{height: '50%'}}>\n          <div style={{ boxSizing: \"border-box\", width: '100%', height: \"100%\", overflowX: 'scroll' }} className=\"ag-theme-material\">\n            <AgGridReact \n                // properties\n                id='cartovl_urban'\n                columnDefs={this.state.columnDefs}\n                defaultColDef={this.state.defaultColDef}\n                rowSelection={this.state.rowSelection}\n                //suppressRowClickSelection //Still is multiple selection but a click in a cell doesnt mean a row selection\n                rowData={this.state.data}\n                enableSorting\n                localeText={this.state.localeText}\n                enableColResize={true}\n                gridOptions={this.state.gridOptions}\n\n                // events\n                onGridReady={this.onGridReady}\n                //onRowSelected={this.onRowSelected}\n                //onRowDataChanged={this.onRowDataChanged}\n                onSelectionChanged={this.onSelectionChanged}\n                >\n            </AgGridReact>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}